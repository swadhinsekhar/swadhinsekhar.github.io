{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Swadhin Sekhar Behera","text":"<p> Bengaluru, India \u00a0|\u00a0  +91-8908903171 \u00a0|\u00a0  swadhinsekhar05@gmail.com \u00a0|\u00a0  swadhinsekhar \u00a0|\u00a0  swadhinsekhar</p>"},{"location":"#technical-skills","title":"Technical Skills","text":"Programming LanguagesC &amp; Golang Networking ProtocolsDNS, DHCP, TCP/IP, SD-WAN/SDN, TLS (JA3/JA3S), mDNS/SSDP SecurityPKI, Certificate Validation, eBPF, Device Fingerprinting Libraries/FrameworksGorilla-mux, websockets, REST API, gRPC, scikit-learn, pandas, redis-py-cluster ToolsGit, Jira, Confluence, Swagger, OpenSSL, Wireshark DevOps/InfraLinux, Docker, Jenkins CI/CD, AWS (Lambda, ECR, S3, ElastiCache, API Gateway) Data FormatsJSON, YAML"},{"location":"#professional-experience","title":"Professional Experience","text":"<p> Cambium Networks :   Staff Engineer  March 2024 - Continue. </p> <ul> <li> <p>Cloud Agent Security Enhancement</p> <ul> <li>Fixed critical certificate validation issue in C-based cloud agent using OpenSSL 3.3.1</li> <li>Enhanced ssl_cert_verify_callback to properly handle 3-tier AWS certificate chain (root/intermediate/leaf CA)</li> <li>Implemented comprehensive certificate chain verification, strict hostname validation against CN, and graceful handling of not-yet-valid certificates</li> <li>Impact: Resolved intermediate CA validation failures while strengthening security checks</li> <li>Skills: C, OpenSSL, PKI, Certificate Validation, Security Hardening</li> </ul> </li> <li> <p>Endpoint Device Classification System</p> <ul> <li>Developed a Golang-based solution to classify endpoint devices by analyzing network attributes including MAC addresses, DHCP fingerprints, TCP/IP stack, TLS (JA3/JA3S), HTTP headers, DNS OS Update lits, and mDNS/SSDP data.</li> <li>Created structured JSON profiles for each device (keyed by MAC address) by aggregating multiple fingerprinting techniques. </li> <li>Integrated with cloud REST API to enrich device profiles with manufacturer/model information.</li> <li>Implemented using eBPF for efficient and scalable network data collection and processing.</li> <li>Impact: Enhanced network visibility and device identification accuracy for security monitoring.</li> <li>Skills: Golang, eBPF, Network Fingerprinting, REST APIs, JSON Data Modeling.</li> </ul> </li> </ul> <p> Cambium Networks :   Sr. Engineer  Nov 2021 - March 2024 </p> <ul> <li> <p>Developed microservice applications to manage REST API calls from the Subscriber Mobile App:</p> <ul> <li>Designed REST API endpoints and JSON schemas for requests and responses.</li> <li>Utilized AWS DynamoDB for storing user data, including notifications and speed test history.</li> <li>Implemented user authentication from AAA Server using gRPC.</li> <li>Implemented test cases for all REST API endpoints, adhering to Test Driven Development practices.</li> </ul> </li> <li> <p>Engaged in full product design and development lifecycle for network solutions:</p> <ul> <li>Designed JSON schema between Network Cloud Server and Wi-Fi Router for all required product features.</li> <li>Collaborated cross-functionally with multiple teams, contributing to end-to-end development and successful implementation of key features.</li> <li>Guided the Quality Assurance team in prioritizing and resolving critical issues.</li> <li>Implemented a speed test agent feature in Wi-Fi routers, enhancing network performance evaluation.</li> <li>Integrated a robust Parental Control feature, enabling enhanced control and security for families.</li> <li>Technologies: C, Golang, Shell, Python, Docker, Jira, Confluence, AWS EC2, S3 Bucket.</li> </ul> </li> <li> <p>Led the development of an Observability Engine with Elastic Stack and Grafana for stats &amp; logs visualization of CPE, Wi-Fi APs, and Wi-Fi Router:</p> <ul> <li>Integrated syslog-ng within Network Access Points (APs) for streamlined log export to the Observability Engine.</li> <li>Developed a stats-collector agent in Golang for real-time monitoring and data-driven insights.</li> <li>Containerized the ELK Stack, Grafana, and syslog-ng server, streamlining deployment and enhancing scalability.</li> </ul> </li> </ul> <p> Lavelle Networks :   Software Engineer - III  Sept 2020 - Nov 2021 </p> <ul> <li> <p>Implemented Fault Visibility &amp; Threshold Crossing Alerts (TCA) in the product:</p> <ul> <li>Integrated fault event generation in various SD-WAN components (Dataplane, Control Plane, DPI Engine, Security Engine).</li> <li>Integrated LMDB (memory-mapped database) for tracking event status such as RAISE or CLEAR.</li> <li>Developed libraries in C, Golang, and Python for use in various user space services.</li> </ul> </li> <li> <p>Developed a System Resource Manager in Golang:</p> <ul> <li>Built a watchdog application to monitor system resources such as CPU, memory, disk, open file descriptors, and system temperatures.</li> <li>Monitored critical applications including Dataplane, DPI Engine, and Control Plane processes.</li> </ul> </li> <li> <p>Implemented inline DNS Proxy in Datapath:</p> <ul> <li>Integrated DNS proxy into the product for improved DNS handling.</li> <li>Utilized hashmap database for DNS answer headers.</li> <li>Managed JSON configuration pull in Control Plane (Python) from Cloud and stored in the appropriate directory.</li> </ul> </li> </ul> <p> Etrance Networks (client Lavelle Networks) :   Software Engineer Aug 2018 - Sept 2020 </p> <ul> <li> <p>Led Active-Active High Availability (HA) feature:</p> <ul> <li>Performed unit testing on the entire feature and resolved all bugs raised during the QA phase.</li> </ul> </li> <li> <p>Ported SD-WAN software to ARM platform:</p> <ul> <li>Cross-compiled and ported all SD-WAN CPE components to ARM devices.</li> <li>Developed a multi-pattern matching library for the DPI Engine on ARM architecture.</li> <li>Integrated Switch Software (RTL8367) into the product.</li> <li>Conducted onsite verification of the board for manufacturing.</li> </ul> </li> <li> <p>Integrated DHCP Server into the SD-WAN platform:</p> <ul> <li>Integrated the DHCP Server in the control plane.</li> <li>Implemented DHCP options such as 150, 66, and 67 in the DHCP server.</li> </ul> </li> <li> <p>Integrated modem support as WAN link into the SD-WAN platform:</p> <ul> <li>Developed software to manage all types of USB-based 4G devices.</li> <li>Developed modem driver for mini-PCI based devices.</li> </ul> </li> </ul> <p> Etrance Networks (client TATA Power SED) :   Software Engineer Dec 2015 - Aug 2018 </p> <ul> <li> <p>Developed Video Conference Bridge:</p> <ul> <li>Built video conference software using GStreamer.</li> <li>Ported the software to TI DM8168 &amp; TI 6636K2H boards.</li> <li>Integrated video codec plugins into the embedded board.</li> </ul> </li> <li> <p>Developed VoIP-based Call Server for Software Defined Radio (SDR):</p> <ul> <li>Developed user authentication module using SIP REGISTER headers.</li> <li>Implemented feature server for various IVR-related queries.</li> <li>Integrated web calls into the VoIP server.</li> </ul> </li> <li> <p>Developed CREW Terminal SIP Client:</p> <ul> <li>Built SIP client software for client-customized hardware.</li> <li>Developed various drivers and firmware for embedded components used in the device.</li> </ul> </li> </ul> <p> Etrance Networks :   R &amp; D Engineer Sept 2015 - Dec 2015 </p> <ul> <li>Developed user authentication over WiFi router:<ul> <li>Integrated Splash software (nodogsplash from OpenWRT) in TP-Link router.</li> <li>Developed cloud server to manage distributed routers.</li> <li>Integrated Google Analytics into the platform.</li> </ul> </li> </ul> <p> Etrance Networks :   Internship  May 2015 - Sept 2015 </p> <ul> <li>Developed Smart Landline Calls over WiFi (IoT):<ul> <li>Built an embedded device to convert BSNL landline calls to home WiFi network, enabling reception on Android mobile phones.</li> <li>Implemented firmware for various embedded chips used in the device (DAA CPC5622, ESP8266).</li> <li>Developed I2S driver for audio codec chip WM8510.</li> <li>Verified digital signals using an oscilloscope.</li> </ul> </li> </ul>"},{"location":"#education","title":"Education","text":"Bachelor of Technology Biju Pattnaik University Of Technology, Rourkela, Odisha Aug 2010 \u2013 May 2014 +2 Science Sri Aurobindo I H S R, Matrubhaban, Cuttack, Odisha June 2008 \u2013 May 2010 Matriculation Khannagar High School, Cuttack, Odisha May 2008"},{"location":"technical-contents/ipsec-demo/","title":"IPSec Demonstration","text":"<p>A demonstration and explanation of IPSec, covering its use for securing IP communications by authenticating and encrypting each IP packet in a communication session.</p>"},{"location":"technical-contents/ipsec-demo/#step-1-lab-setup-overview","title":"Step 1: Lab Setup Overview","text":"<p>Objective: Create an IPsec tunnel between two Linux machines (e.g., Machine A and Machine B) behind the same home router using StrongSwan. Capture and analyze the traffic to understand IPsec's inner workings.</p> <p>Topology:</p> <ul> <li>Machine A: 192.168.40.60 (acts as IPsec peer 1)</li> <li>Machine B: 192.168.40.100 (acts as IPsec peer 2)</li> <li>Virtual subnets (for testing):</li> <li>Machine A: 10.10.1.0/24</li> <li>Machine B: 10.10.2.0/24</li> <li>IPsec mode: Tunnel mode (to simulate a site-to-site VPN).</li> </ul>"},{"location":"technical-contents/ipsec-demo/#step-2-install-strongswan","title":"Step 2: Install StrongSwan","text":"<p>Install StrongSwan on both machines:</p> <pre><code>sudo apt update\nsudo apt install strongswan strongswan-pki libcharon-extra-plugins\n</code></pre> <p>Verify Installation: <pre><code>sudo systemctl status strongswan\n</code></pre> Ensure the service is running. If not, start it: <pre><code>sudo systemctl start strongswan\nsudo systemctl enable strongswan\n</code></pre></p>"},{"location":"technical-contents/ipsec-demo/#step-3-configure-ipsec-with-strongswan","title":"Step 3: Configure IPsec with StrongSwan","text":"<p>We'll configure a site-to-site IPsec tunnel using pre-shared keys (PSK) for simplicity. You can later experiment with certificates for a more secure setup.</p>"},{"location":"technical-contents/ipsec-demo/#on-machine-a-1921684060","title":"On Machine A (192.168.40.60)","text":"<p>Edit <code>/etc/ipsec.conf</code>:</p> <pre><code>sudo vi /etc/ipsec.conf\n</code></pre> <p>Add the following configuration:</p> <pre><code>config setup\n    charondebug=\"ike 2, knl 2, cfg 2\"\n\nconn site-to-site\n    left=192.168.40.60\n    leftsubnet=10.10.1.0/24\n    right=192.168.40.100\n    rightsubnet=10.10.2.0/24\n    type=tunnel\n    authby=psk\n    keyexchange=ikev2\n    ike=aes256-sha256-modp2048\n    esp=aes256-sha256\n    auto=start\n</code></pre> <p>Set Pre-Shared Key in <code>/etc/ipsec.secrets</code>:</p> <pre><code>sudo vi /etc/ipsec.secrets\n</code></pre> <p>Add:</p> <pre><code>192.168.40.60 192.168.40.100 : PSK \"your-secure-key-here\"\n</code></pre> <p>NOTE: Replace <code>\"your-secure-key-here\"</code> with a strong key (e.g., a 32-character random string).</p> <p>Create a virtual subnet for testing:</p> <pre><code>sudo ip link add dummy0 type dummy\nsudo ip addr add 10.10.1.1/24 dev dummy0\nsudo ip link set dummy0 up\n</code></pre> <p>Restart StrongSwan:</p> <pre><code>sudo ipsec restart\n</code></pre>"},{"location":"technical-contents/ipsec-demo/#on-machine-b-19216840100","title":"On Machine B (192.168.40.100)","text":"<p>Repeat the same steps on Machine B (192.168.40.100) and configure the ipsec.conf and ipsec.secrets file with the following configuration:</p> <p>Update the IP address and subnet configuration to the <code>/etc/ipsec.conf</code> file:</p> <pre><code>conn site-to-site\n    left=192.168.40.100\n    leftsubnet=10.10.2.0/24\n    right=192.168.40.60\n    rightsubnet=10.10.1.0/24\n    ...\n</code></pre> <p>Update the IP address configuration to the <code>/etc/ipsec.secrets</code> file:</p> <pre><code>192.168.40.100 192.168.40.60 : PSK \"your-secure-key-here\"\n</code></pre> <p>Restart StrongSwan:</p> <pre><code>sudo ipsec restart\n</code></pre>"},{"location":"technical-contents/ipsec-demo/#install-dummy-interface","title":"Install dummy interface","text":"<p>Check if the dummy driver is installed:</p> <pre><code>root@ubuntu:/home/ubuntu# lsmod | grep dummy\nroot@ubuntu:/home/ubuntu# ip link add dummy0 type dummy\nError: Unknown device type.\nroot@ubuntu:/home/ubuntu# modprobe dummy\nmodprobe: FATAL: Module dummy not found in directory /lib/modules/5.15.0-1034-raspi\n</code></pre> <p>Install the dummy driver:</p> <pre><code>sudo apt install linux-modules-extra-$(uname -r)\n</code></pre> <p>Load the dummy driver:</p> <pre><code>root@ubuntu:/home/ubuntu# modprobe dummy\nroot@ubuntu:/home/ubuntu# lsmod | grep dummy\ndummy                  20480  0\n</code></pre> <p>Add a dummy interface and set the IP address:</p> <pre><code>root@ubuntu:/home/ubuntu# ip link add dummy0 type dummy\nroot@ubuntu:/home/ubuntu# sudo ip addr add 10.10.1.1/24 dev dummy0\nroot@ubuntu:/home/ubuntu# sudo ip link set dummy0 up\nroot@ubuntu:/home/ubuntu# ifconfig dummy0\ndummy0: flags=195&lt;UP,BROADCAST,RUNNING,NOARP&gt;  mtu 1500\n        inet 10.10.1.1  netmask 255.255.255.0  broadcast 0.0.0.0\n        inet6 fe80::8432:6aff:feb6:2b5b  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 86:32:6a:b6:2b:5b  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 1  bytes 70 (70.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>"},{"location":"technical-contents/ipsec-demo/#verify-the-ipsec-tunnel","title":"Verify the IPsec Tunnel","text":"<p>Check the status of the IPsec tunnel:</p> <pre><code>ubuntu@ubuntu:~$ sudo ipsec restart\nStopping strongSwan IPsec failed: starter is not running\nStarting strongSwan 5.9.5 IPsec [starter]...\nubuntu@ubuntu:~$ sudo ipsec status\nSecurity Associations (1 up, 0 connecting):\nsite-to-site[1]: ESTABLISHED 29 seconds ago, 192.168.40.60[192.168.40.60]...192.168.40.100[192.168.40.100]\nsite-to-site{2}:  INSTALLED, TUNNEL, reqid 1, ESP SPIs: c1704a70_i cc0f5a56_o\nsite-to-site{2}:   10.10.1.0/24 === 10.10.2.0/24\n</code></pre> <p>You should see the site-to-site connection as ESTABLISHED.</p> <pre><code>sudo tail -f /var/log/syslog | grep charon\n</code></pre> <p>The <code>charondebug</code> settings in ipsec.conf enable verbose logging for IKE, kernel, and configuration.</p> <p>Test connectivity from Machine A to Machine B:</p> <pre><code>ubuntu@ubuntu:~$ ping 10.10.2.1 -c 3\nPING 10.10.2.1 (10.10.2.1) 56(84) bytes of data.\n64 bytes from 10.10.2.1: icmp_seq=1 ttl=64 time=0.489 ms\n64 bytes from 10.10.2.1: icmp_seq=2 ttl=64 time=0.358 ms\n64 bytes from 10.10.2.1: icmp_seq=3 ttl=64 time=0.384 ms\n\n--- 10.10.2.1 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2042ms\nrtt min/avg/max/mdev = 0.358/0.410/0.489/0.056 ms\n</code></pre> <p>From Machine B, ping the virtual subnet on Machine A:</p> <pre><code>ubuntu@ubuntu:~$ ping 10.10.1.1 -c 3\nPING 10.10.1.1 (10.10.1.1) 56(84) bytes of data.\n64 bytes from 10.10.1.1: icmp_seq=1 ttl=64 time=0.455 ms\n64 bytes from 10.10.1.1: icmp_seq=2 ttl=64 time=0.399 ms\n64 bytes from 10.10.1.1: icmp_seq=3 ttl=64 time=0.389 ms\n\n--- 10.10.1.1 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2025ms\nrtt min/avg/max/mdev = 0.389/0.414/0.455/0.029 ms\n</code></pre> <p>What to look for in the IPsec tunnel:</p> <ul> <li>IKEv2 packets (UDP port 500 or 4500): Used for the initial key exchange and authentication. Look for:</li> <li>IKE_SA_INIT: Initial exchange to establish the IKE Security Association (SA).</li> <li>IKE_AUTH: Authentication phase using the pre-shared key.</li> <li>ESP packets: After the tunnel is established, traffic between 10.10.1.0/24 and 10.10.2.0/24 will be encapsulated in Encapsulating Security Payload (ESP) packets. These will appear as encrypted payloads between 192.168.40.60 and 192.168.40.100.</li> </ul> <p>Filter in Wireshark: - <code>ip.src == 192.168.40.60 &amp;&amp; ip.dst == 192.168.40.100</code> for traffic from A to B. - <code>isakmp</code> for IKEv2 packets. - <code>esp</code> for ESP packets.</p>"},{"location":"technical-contents/ipsec-demo/#step-5-understanding-ipsec-protocol","title":"Step 5: Understanding IPsec Protocol","text":"<p>IPsec is a suite of protocols for securing IP communications. Here's a breakdown of what you'll observe and learn:</p> <p>Key Components:</p> <ul> <li>IKE (Internet Key Exchange): Negotiates Security Associations (SAs) for IPsec.</li> <li>Phase 1 (IKE_SA_INIT): Establishes a secure channel using Diffie-Hellman for key exchange, agrees on encryption (e.g., AES256) and integrity (e.g., SHA256) algorithms.</li> <li>Phase 2 (IKE_AUTH): Authenticates peers (using PSK in this case) and sets up the IPsec SA for data transfer.</li> <li>ESP (Encapsulating Security Payload): Encrypts and authenticates the actual data (e.g., your ping packets). In tunnel mode, the entire IP packet is encrypted and encapsulated in a new IP packet.</li> <li>AH (Authentication Header): Provides authentication but not encryption (not used in this setup).</li> </ul> <p>What you'll see in Wireshark:</p> <ul> <li>IKEv2 Negotiation: Look for UDP packets on port 500. These contain proposals for encryption algorithms, Diffie-Hellman public keys, and nonces.</li> <li>ESP Traffic: Encrypted packets with no readable payload. The ESP header includes a Security Parameter Index (SPI) to identify the SA and a sequence number to prevent replay attacks.</li> <li>No plaintext data: Since ESP encrypts the original IP packet (e.g., ICMP pings from 10.10.1.1 to 10.10.2.1), you won't see the original packet details in the capture.</li> </ul> <p>Key Parameters in the Config:</p> <ul> <li><code>ike=aes256-sha256-modp2048</code>: Specifies AES-256 encryption, SHA-256 hashing, and 2048-bit Diffie-Hellman group for IKE.</li> <li><code>esp=aes256-sha256</code>: Specifies AES-256 encryption and SHA-256 authentication for the ESP tunnel.</li> <li><code>type=tunnel</code>: Uses tunnel mode, encapsulating the entire IP packet.</li> </ul>"},{"location":"technical-contents/lldp/","title":"LLDP (Link Layer Discovery Protocol)","text":"<p>A technical overview and practical guide to LLDP, a protocol used by network devices for advertising their identity and capabilities on a local network.</p>"},{"location":"technical-contents/overview/","title":"Technical Contents","text":"<ul> <li>IPSec Demonstration \u2014 A demonstration and explanation of IPSec, covering its use for securing IP communications by authenticating and encrypting each IP packet in a communication session.</li> </ul>"}]}